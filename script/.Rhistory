# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
roc.test(roc1, roc2, reuse.auc=FALSE)
?read.csv
?best
gbmFit2$method
gbmFit2$modelInfo
gbmFit2$modelType
gbmFit2$results
gbmFit2$pred
gbmFit2$bestTune
gbmFit2$dots
gbmFit2$metric
gbmFit2$finalModel
gbmFit2$resample
gbmFit2$coefnames
gbmFit2$finalModel
predict(gbmFit2$finalModel)
predict(gbmFit2)
predict.gbm(gbmFit2$finalModel)
predict.gbm(gbmFit2)
predict.gbm(gbmFit2$finalModel , n.trees = 50)
predict(gbmFit2)
length(predict(gbmFit2))
predict.train(gbmFit2$finalModel)
predict.train(gbmFit2)
predict(gbmFit2 , newdata = test)
predict(gbmFit2 , newdata = test , type = 'class')
predict(gbmFit2 , newdata = test , type = 'raw')
predict(gbmFit2 , newdata = test , type = 'prob')
set.seed(825)
svmFit <- train(Class ~ . , data = train , method = 'svmRadial' , trControl = fitControl , preProcess = c('center' , 'scale') , tuneLength = 8 , metric = 'ROC')
svmFit
?Sonar
summary(Sonar)
set.seed(825)
rdaFit <- train(Class ~ . , data = train , method = 'rda' , trControl = fitControl , preProcess = c('center' , 'scale') , tuneLength = 4 , metric = 'ROC')
rdaFit
resamps <- resamples(list(GBM = gbmFit3 , SVM = svmFit , RDA = rdaFit))
set.seed(825)
gbmFit1 <- train(Class ~ ., data = train , method = "gbm" , trControl = fitControl , verbose = FALSE)
resamps <- resamples(list(GBM = gbmFit1 , SVM = svmFit , RDA = rdaFit))
resamps
summary(resamps)
trellis.par.set(theme1)
bwplot(resamps, layout = c(3, 1))
theme1 <- trellis.par.get()
trellis.par.set(theme1)
bwplot(resamps, layout = c(3, 1))
dotplot(resamps, metric = "ROC")
xyplot(resamps, what = "BlandAltman")
trellis.par.set(theme1)
xyplot(resamps, what = "BlandAltman")
splom(resamps)
require(AppliedPredictiveModeling)
transparentTheme(trans = .9)
xyplot(resamps, what = "BlandAltman")
splom(resamps)
difValues <- diff(resamps)
difValues
summary(difValues)
bwplot(difValues, layout = c(3, 1))
dotplot(difValues)
fitControl <- trainControl(method = 'none' , classProbs = TRUE)
fitControl <- trainControl(method = 'none' , classProbs = TRUE)
set.seed(825)
gbmFit4 <- train(Class ~ . , data = train , trControl = fitControl , verbose = FALSE , tuneGrid = data.frame(interaction.depth = 4 , n.trees = 100 , shrinkage = 0.1 ) , metric = 'ROC')
gbmFit4 <- train(Class ~ . , data = train , method = 'gbm' , trControl = fitControl , verbose = FALSE , tuneGrid = data.frame(interaction.depth = 4 , n.trees = 100 , shrinkage = 0.1 ) , metric = 'ROC')
gbmFit4
C5.0Fit <- train(Class ~ . , data = train , method = 'C5.0', trControl = fitControl)
C5.0Fit <- train(Class ~ . , data = train , method = 'C5.0', trControl = fitControl , tuneGrid = data.frame())
C5.0Fit <- train(Class ~ . , data = train , method = 'C5.0', trControl = fitControl , tuneGrid = data.frame(trials = 5 , model = 1 , winnow = 1))
C5.0Fit
fitControl <- trainControl(method = 'cv' , number = 5)
C5.0Fit <- train(Class ~ . , data = train , method = 'C5.0', trControl = fitControl)
warnings()
C5.0Fit
C5.0Fit <- train(Class ~ . , data = train , method = 'C5.0', trControl = fitControl , tuneGrid = data.frame(trials = 5 , model = 'tree' , winnow = FALSE))
C5.0Fit
fitControl <- trainControl(method = 'none' , classProbs = TRUE)
C5.0Fit <- train(Class ~ . , data = train , method = 'C5.0', trControl = fitControl , tuneGrid = data.frame(trials = 5 , model = 'tree' , winnow = FALSE))
C5.0Fit
predict(C5.0Fit)
predict(C5.0Fit , newdata = test)
?C5.0
library(doMC)
install.packages("doMC")
install.packages("doMC")
install.packages("doMPI")
fitControl <- trainControl(method = 'none' , classProbs = FALSE)
C5.0Fit <- train(Class ~ . , data = train , method = 'C5.0', trControl = fitControl , tuneGrid = data.frame(trials = 1 , model = 'tree' , winnow = FALSE))
require(mlbench)
require(caret)
set.seed(998)
C5.0Fit <- train(Class ~ . , data = train , method = 'C5.0', trControl = fitControl , tuneGrid = data.frame(trials = 1 , model = 'tree' , winnow = FALSE))
C5.0Fit
C5.0Fit$finalModel
summary(C5.0Fit)
fitControl <- trainControl(method = 'cv' , number = 5)
CartFit <- train(Class ~ . , data = train , method = 'rpart', trControl = fitControl)
CartFit
?rpart
fitControl <- trainControl(method = 'none' , classProbs = FALSE)
CartFit <- train(Class ~ . , data = train , method = 'rpart', trControl = fitControl)
CartFit <- train(Class ~ . , data = train , method = 'rpart', trControl = fitControl , tuneGrid = data.frame())
CartFit <- train(Class ~ . , data = train , method = 'rpart', trControl = fitControl , tuneGrid = data.frame(cp = .08 , minsplit = 5))
CartFit <- train(Class ~ . , data = train , method = 'rpart', trControl = fitControl , tuneGrid = data.frame(cp = .08))
CartFit
summary(CartFit)
CartFit$results
CartFit$finalModel
fitControl <- trainControl(method = 'none' , classProbs = FALSE)
LogisticFit <- train(Class ~ . , data = train , method = 'glm' , family = 'binominal' , trControl = fitControl)
LogisticFit <- train(Class ~ . , data = train , method = 'glm' , family = 'binomial' , trControl = fitControl)
train
str(train)
head(train)
Class1 <- !(train$Class == 'M')
head(Class1)
Class1 <- train$Class - 1
Class1 <- as.numeric(train$Class) - 1
head(Class1)
data(Sonar)
Sonar$Class1 <- as.numeric(Sonar$Class) - 1
str(Sonar)
Sonar$Class1 <- as.factor(Sonar$Class1)
str(Sonar)
table(Sonar[,c('Class' , 'Class1')])
train_idx <- createDataPartition(Sonar$Class , p = .75 , list = FALSE)
train <- Sonar[train_idx , ]
test <- Sonar[-train_idx , ]
names(train)
length(names(train))
train <- train[,-61]
length(names(train))
names(train)
LogisticFit <- train(Class1 ~ . , data = train , method = 'glm' , family = 'binomial' , trControl = fitControl)
summary(LogisticFit)
`20141128_咪咕特级会员取数_订购用户_part1_82537` <- read.csv("C:/Users/Richard/Desktop/201411 \x50\x3E\xEA\x21\xA1\x7B\xF8\x36\xFA\x4A\x45\x29\xE7\xFA\x48/ftpupload/20141128_\x4A\x45\x29\xE7\xFA\x48\x36\x50_\xB2\xDD\x58\x27_part1_82537.txt", header=FALSE, quote="", stringsAsFactors=FALSE)
View(`20141128_咪咕特级会员取数_订购用户_part1_82537`)
`20141128_order_user_part1_82537` <- read.csv("C:/Users/Richard/Desktop/Gumi analysis/20141128_order_user_part1_82537.txt", header=FALSE)
View(`20141128_order_user_part1_82537`)
df <- 20141128_order_user_part1_82537
df <- '20141128_order_user_part1_82537'
View(`20141128_order_user_part1_82537`)
df <- read.csv("C:/Users/Richard/Desktop/Gumi analysis/20141128_order_user_part1_82537.txt", header=FALSE)
View(df)
str(df)
require(caret)
require(dplyr)
data(Sonar)
require(caret)
train_idx <- createDataPartition(Sonar$Class , p = 0.7 , list = FALSE)
train <- Sonar[train_idx , ]
test <- Sonar[-train_idx , ]
fit <- rpart(Class ~ . , data = train , method = 'class')
fit
summary(fit)
library(parallel)
cl.cores <- detectCores()
cl <- makeCluster(cl.cores)
library(e1071)
x <- rnorm(1000)
op <- par(mar = c(3,3,4,2) + .1)
hist(x , probability = T , main = "Skewness = " + round(skewness(x) , 2) , xlab = "" , ylab = "")
hist(x , probability = T , main = paste("Skewness = " + round(skewness(x) , 2)) , xlab = "" , ylab = "")
hist(x , probability = T , main = paste("Skewness = " , round(skewness(x) , 2)) , xlab = "" , ylab = "")
lines(density(x) , col = "red" ,lwd = 3)
par(op)
x <- rexp(1000)
op <- par(mar = c(3,3,4,2) + .1)
hist(x , probability = T , main = paste("Skewness = " , round(skewness(x) , 2)) , xlab = "" , ylab = "")
lines(density(x) , col = "red" ,lwd = 3)
par(op)
x <- rnorm(1000)
kurtosis(x)
library(ISLR)
data(Wage)
library(caret)
Wage <- Wage[ , -"logwage"]
Wage <- Wage[ , -c("logwage")]
names(Wage)
Wage <- subset(Wage , select = -"logwage")
Wage <- subset(Wage , select = -c(logwage))
names(Wage)
inBuild <- createDataPartition(Wage$wage , p = .7 , list = F)
validation <- Wage[-inBuild , ]
buildDate <- Wage[inBuild , ]
inTrain <- createDataPartition(buildDate$wage , p = .7 , list = F)
training <- buildDate[inTrain , ]
testing <- buildDate[-inTrain , ]
dim(training)
dim(testing)
dim(validation)
mod1 <- train(wage ~ . , method = 'glm' , data = training)
warnings
warnings()
mod1
mod2 <- train(wage ~ . , method = "rf" , data = training , trControl = trainControl(method = "cv") , number = 3)
mod2
pred1 <- predict(mod1 , testing)
head(pred1)
pred2 <- predict(mod2 , testing)
head(pred2)
qplot(pred1 , pred2)
qplot(pred1 , pred2 , color = wage)
qplot(pred1 , pred2 , color = wage , data = testing)
qplot(pred1 , wage , data = testing)
qplot(pred2 , wage , data = testing)
predDf <- data.frame(pred1 , pred2 , wage = testing$wage)
head(predDf)
combModFit <- train(wage ~ . , method = "gam" , data = predDf)
combModFit
combPred <- pred(combModFit , predDf)
combPred <- predict(combModFit , predDf)
head(combPred)
sqrt(sum((pred1 - testing$wage)^2))
sqrt(sum((pred2 - testing$wage)^2))
sqrt(sum((combPred - testing$wage)^2))
data(faithful)
hist(faithful$eruptions)
hist(faithful$eruptions , breaks = 20 , col = 'light blue')
points(density(faithful$eruptions , bw = .1) , type = 'l' , lwd = 3 , col = 'red')
hist(faithful$eruptions , breaks = 20 , col = 'light blue' , probability = T)
points(density(faithful$eruptions , bw = .1) , type = 'l' , lwd = 3 , col = 'red')
rug(faithful$eruptions)
hist(faithful$eruptions , breaks = 25 , col = 'light blue' , probability = T)
points(density(faithful$eruptions , bw = .1) , type = 'l' , lwd = 3 , col = 'red')
rug(faithful$eruptions)
?curve
f <- function(x) {
dnorm(x , mean = mean(faithful$eruptions) , sd = sd(faithful$eruptions))}
curve(f , add = T , col = "red" , lwd = 3 , lty = 2)
x <- rnorm(100)
m <- mean(x)
s <- sd(x)
print("a")
qqnorm(x , axes = F)
for( i in 1:1000 ) {
par(new = T)
qqnorm(rnorm(100 , mean = m , sd = s) , col = 'red' , pch = '.' , axes = F , xlab = '' , ylab = '' , main = '')
}
qqnorm(x , axes = F)
for( i in 1:1000 ) {
par(new = T)
qqnorm(rnorm(100 , mean = m , sd = s) , col = 'red' , axes = F , xlab = '' , ylab = '' , main = '')}
qqnorm(x)
par(new = T)
for( i in 1:1000 ) {
par(new = T)
qqnorm(rnorm(100 , mean = m , sd = s) , col = 'red' , pch = '.' , axes = F , xlab = '' , ylab = '' , main = '')}
qqline(x , col = 'blue' , lwd = 3)
hist(exp(rnorm(1000)))
exp(rnorm(1000))
exp(-1)
exp(1)
exp(0)
exp(rnorm(1000) , breaks = 20)
exp(rnorm(1000) , break = 20)
hist(exp(rnorm(1000)) , breaks = 20)
hist(exp(rnorm(1000)) , breaks = 50)
hist(exp(rnorm(1000)) , breaks = 100)
hist(exp(rnorm(1000)) , breaks = 100 , xlim = c(0,10))
hist(exp(rnorm(1000)) , breaks = 100 , xlim = c(0,5))
hist(exp(rnorm(1000)) , breaks = 100 , xlim = c(0,3))
log(0.5)
set.seed(2015)
hist(exp(rnorm(1000)) , breaks = 100 , xlim = c(0,3))
hist(exp(rnorm(1000)) , breaks = 100 , xlim = c(0,10))
exp(seq(-3,3,.2))
curve(exp)
?curve
curve(exp , -3 , 3)
y <- exp(rnorm(1000))
qqnorm(y)
qqline(y)
qqline(y , col = 'red')
quantile(y)
quantile(rnorm(1000))
y <- -exp(rnorm(1000))
qqnorm(y)
qqnorm(y , ylim = c(-2,2))
qqline(y , col = "red")
y <- runif(1000 , min = -1 , max = 1)
qqnorm(y)
qqline(y)
y <- rnorm(1000 , mean = 3)
qqnorm(y)
qqline(y)
set.seed(2015)
hist(rnorm(1000)^2)
hist(exp(rnorm(1000)))
qqnorm(rnorm(1000)^2)
qqline(rnorm(1000)^2)
qqline(rnorm(1000)^2 , col = 'red' , lwd = 3)
x <- seq(from=0, to=2, length=100)
y <- exp(x)-1
plot(y ~ x , type = 'l' , col = 'red')
plot(y ~ x , type = 'l' , col = 'red' , xlim = c(-2,2) , ylim = c(-2,2))
hist(runif(1000 , min = -2 , max = 2))
hist(rnorm(1000))
hist(exp(rnomr(1000)))
hist(exp(rnom(1000)))
hist(exp(rnorm(1000)))
hist(rnorm(1000))
qqnorm(exp(rnorm(1000)))
qqline(exp(rnorm(1000)))
qqnorm(exp(rnorm(1000)) , xlim = c(-3,0))
quantile(exp(rnorm(1000)) , seq(0,1,0.05))
quantile(rnorm(1000) , seq(0,1,0.05))
xy <- matrix(0 , 0 ,
.2 , .9 ,
.3 , .95 ,
.5 , .99 ,
1 , 1) ,
xy <- matrix((0 , 0 ,
xy <- matrix(c(0 , 0 ,
.2 , .9 ,
.3 , .95 ,
.5 , .99 ,
1 , 1) ,byrow = T , nc = 2)
xy
plot(xy , type = 'b' , pch = 15)
polygon(xy , border = F , col = 'pink')
lines(xy , type = 'b' , pch = 15)
line(0,1,lty = 2)
abline(0,1,lty = 2)
setwd("C:/Users/Richard/Desktop/Gumi analysis/script")
set.seed(2015)
require(Hmisc)
require(caret)
require(pastecs)
require(xtable)
# df$OnlineId <- as.integer(df$OnlineId)
## combine the data(NOT RUN)
# df <- read.csv("../data/20141128_order_user_part1_82537.txt", header = F)
# columnNameDf <- read.csv("../data/meta/columnName_part1.txt" , header = F)
# names(df) <- columnNameDf$V1
# df1 <- read.csv("../data/20141128_order_user_part2_82537.txt", header = F)
# columnNameDf1 <- read.csv("../data/meta/columnName_part2.txt" , header = F)
# names(df1) <- columnNameDf1$V1
# df2 <- merge(x = df , y = df1 , by = "SubId")
# df2$result <- 1
#
# df <- read.csv("../data/20141128_not_order_user_part1_79081.txt" , header = F)
# names(df) <- columnNameDf$V1
# df1 <- read.csv("../data/20141128_not_order_user_part2_79081.txt", header = F)
# names(df1) <- columnNameDf1$V1
# df3 <- merge(x = df , y = df1 , by = "SubId")
# df3$result <- 0
#
# df4 <- rbind(df2 , df3)
# write.csv(df4 , file = "../data/1_combinedData.csv")
## strip the almost missing variable
calcuMissing <- function(x) {
#   Calculate the Exact missing number and the percentage of missing number of a variable
#   x  a vector
data.frame(Missing = sum(is.na(x)) , MissingPercentage = sum(is.na(x)) / length(x))
}
checkFactorVar <- function(x , y) {
require(MASS)
returnVal <- NULL
table <- xtabs(~ x + y)
dimX <- dim(table)[1]
dimY <- dim(table)[2]
suppressWarnings(chisqFirst <- chisq.test(table))
if( dimX == 2 & dimY == 2){
if( (sum((chisqFirst$expected < 5)) < 1) &
(sum((chisqFirst$expected < 1)) == 0) &
(sum(table) > 40)){
returnVal <- chisq.test(table)$p.value
}
else if( (sum((chisqFirst$expected < 5)) >= 1) &
(sum((chisqFirst$expected < 1)) == 0) &
(sum(table) > 40)){
returnVal <- chisq.test(table , correct = T)$p.value
}
else{
returnVal <- summary(loglm(~1 + 2 , table))$tests[1,3]
}
}else{
if( (sum((chisqFirst$expected <5)) < .1 * dimX * dimY) ){
returnVal <- chisq.test(table)$p.value
}else{
returnVal <- summary(loglm(~1 + 2 , table))$tests[1,3]
}
}
return(returnVal)
}
# read the data
df <- read.csv("../data/1_combinedData.csv")
# df$OnlineId <- as.integer(df$OnlineId)
df$JoinDate <- as.Date(df$JoinDate , "%Y%m%d")
df$UserStatus <- as.factor(df$UserStatus)
df$Warn5Flag <- as.factor(df$Warn5Flag)
df$UserDelete <- as.factor(df$UserDelete)
df$OaFlag <- as.factor(df$OaFlag)
df$GenderId <- as.factor(df$GenderId)
df$RegistedId <- as.factor(df$RegistedId)
df$JtId <- as.factor(df$JtId)
df$PlanId <- as.factor(df$PlanId)
df$DeptId <- as.factor(df$DeptId)
df$GroupFlag <- as.factor(df$GroupFlag)
df$MighFlag <- as.factor(df$MighFlag)
# df$UserAge <- as.integer(df$UserAge)
df$SchoolFlag <- as.factor(df$SchoolFlag)
df$CareerPrefer <- as.factor(df$CareerPrefer)
df$CurPoints <- as.integer(df$CurPoints)
df$PlanType <- as.factor(df$PlanType)
df$PayType <- as.factor(df$PayType)
df$ChkPrint <- as.factor(df$ChkPrint)
df$AccFlag <- as.factor(df$AccFlag)
df$IsQyMifi <- as.factor(df$IsQyMifi)
df$Is4gFlag <- as.factor(df$Is4gFlag)
# df$Imei14 not set
# df$KeyImei not set
# df$DateIpyhb <- as.Date(df$DateIpyhb , "%Y%m%d")
df$Chk3yZf <- as.factor(df$Chk3yZf)
# df$Date5ymy <- as.Date(df$Date5ymy , "%Y%m%d")
df$DateMgtjhy <- as.Date(df$DateMgtjhy , "%Y%m%d")
df$GprsType <- as.factor(df$GprsType)
df$GprsStandardType <- as.factor(df$GprsStandardType)
df$IphoneFlag <- as.factor(df$IphoneFlag)
df$CreateChannel <- as.factor(df$CreateChannel)
df$JoinDate <- as.Date.character(df$JoinDate , "%Y%m%d")
df$DateMgtjhy <- as.Date.character(df$DateMgtjhy , "%Y%m%d")
missingField <- which(sapply(df , MissingPer <- function(x){sum(is.na(x)) / length(x)}) > .5)
# TODO: EXAM THE MISSING VALUE VARIABLE
factorField <- which(sapply(df , is.factor))
# strip the id field
factorField <- factorField[-1]
# strip too many levels factor variable
factorFieldTooManyLevels <- which(sapply(df ,
getTooManyLevelsVar <- function(x) { length(levels(x)) > 20 }))
factorField <- factorField[!names(factorField) %in% names(factorFieldTooManyLevels)]
factorField <- setdiff(factorField , factorFieldTooManyLevels)
# TODO: DEAL WITH THE TOO MANY LEVELS VARIABLE
#general check the factor variable
sapply(df[,factorField] , genContegencyTable <- function(x , y){ table(x , y)} , df$result)
df <- subset(df , UserStatus == 100 & Warn5Flag == 0 & UserDelete == 0 & OaFlag == 0 ,
select = -c(UserStatus , Warn5Flag , UserDelete , OaFlag))
inBuildIdx <- createDataPartition(df$result , p = 0.7 , list = F)
inBuild <- df[ inBuildIdx , ]
validation <- df[ -inBuildIdx , ]
trainIdx <- createDataPartition(inBuild$result , p = .7 , list = F)
training <- inBuild[ trainIdx , ]
testing <- inBuild[ -trainIdx , ]
factorField <- sapply(training , is.factor)
factorField
factorField <- which(sapply(training , is.factor))
factorField
factorFieldTooManyLevels <- which(sapply(df ,
getTooManyLevelsVar <- function(x) { length(levels(x)) > 20 }))
factorFieldTooManyLevels
factorField[!names(factorField) %in% names(factorFieldTooManyLevels)]
factorFieldCadinate <- factorField[!names(factorField) %in% names(factorFieldTooManyLevels)]
sapply(training[,factorFieldCadinate] , checkFactorVar , training$result)
checkFactorVar <- function(x , y) {
require(MASS)
returnVal <- NULL
table <- xtabs(~ x + y)
dimX <- dim(table)[1]
dimY <- dim(table)[2]
suppressWarnings(chisqFirst <- chisq.test(table))
if( dimX == 2 & dimY == 2){
if( (sum((chisqFirst$expected < 5)) < 1) &
(sum((chisqFirst$expected < 1)) == 0) &
(sum(table) > 40)){
suppressWarnings(returnVal <- chisq.test(table)$p.value)
}
else if( (sum((chisqFirst$expected < 5)) >= 1) &
(sum((chisqFirst$expected < 1)) == 0) &
(sum(table) > 40)){
suppressWarnings(returnVal <- chisq.test(table , correct = T)$p.value)
}
else{
returnVal <- summary(loglm(~1 + 2 , table))$tests[1,3]
}
}else{
if( (sum((chisqFirst$expected <5)) < .1 * dimX * dimY) ){
suppressWarnings(returnVal <- chisq.test(table)$p.value)
}else{
returnVal <- summary(loglm(~1 + 2 , table))$tests[1,3]
}
}
return(returnVal)
}
sapply(training[,factorFieldCadinate] , checkFactorVar , training$result)
t(sapply(training[,factorFieldCadinate] , checkFactorVar , training$result))
factorFieldCadinateP.val <- sapply(training[,factorFieldCadinate] , checkFactorVar , training$result)
factorFieldCadinateP.val
factorFieldCadinateP.val < .05
which(!factorFieldCadinateP.val < .05)
genContegencyTable(training$GenderId , training$result)
(factorFieldCadinate <- factorField[!names(factorField) %in% names(factorFieldTooManyLevels)])
(factorFieldCadinateNotSig <- which(!factorFieldCadinateP.val < .05))
factorFieldCadinate <- setdiff(factorFieldCadinate , factorFieldCadinateNotSig)
factorField <- which(sapply(training , is.factor))
factorFieldTooManyLevels <- which(sapply(df ,
getTooManyLevelsVar <- function(x) { length(levels(x)) > 20 }))
(factorFieldCadinate <- factorField[!names(factorField) %in% names(factorFieldTooManyLevels)])
factorFieldCadinateP.val <- sapply(training[,factorFieldCadinate] , checkFactorVar , training$result)
(factorFieldCadinateNotSig <- which(!factorFieldCadinateP.val < .05))
factorFieldCadinate <- setdiff(factorFieldCadinate , factorFieldCadinateNotSig)
sapply(training[ , factorFieldCadinate] , genContegencyTable)
sapply(training[ , factorFieldCadinate] , genContegencyTable , training$result)
